import os
import base64
import json
from flask import Blueprint, request, jsonify
from flask_cors import cross_origin
from openai import OpenAI
from dotenv import load_dotenv
import io
from PIL import Image

# Charger les variables d'environnement
load_dotenv()

image_analysis_bp = Blueprint('image_analysis', __name__)

# Initialiser le client OpenAI
client = OpenAI(api_key=os.getenv('OPENAI_API_KEY', 'sk-test-key'))

def analyze_image_with_gpt4_vision(image_data):
    """
    Analyse une image avec GPT-4 Vision pour d√©tecter un commerce/lieu pour R8it
    """
    try:
        # Pr√©parer le prompt sp√©cialis√© pour R8it
        prompt = """
        Tu es un assistant IA sp√©cialis√© dans l'analyse d'exp√©riences pour l'application R8it.
        
        R8it permet aux utilisateurs de noter et commenter leurs exp√©riences en prenant simplement une photo.
        
        Analyse cette image et identifie PR√âCIS√âMENT ce que tu vois :
        
        TYPES D'EXP√âRIENCES √Ä D√âTECTER :
        üçΩÔ∏è RESTAURANTS/CAF√âS : Plats, menus, devantures, int√©rieurs de restaurants
        üé¨ CIN√âMAS/SPECTACLES : Affiches de films, salles de cin√©ma, th√©√¢tres, √©v√©nements
        üèõÔ∏è LIEUX TOURISTIQUES : Monuments, mus√©es, sites historiques, attractions
        üè™ COMMERCES : Magasins, boutiques, enseignes, produits
        üè¢ SERVICES : Administrations, banques, services publics
        ‚ö†Ô∏è ARNAQUES : SMS frauduleux, emails suspects, faux sites web
        üè† PRODUITS : Articles achet√©s, emballages, √©tiquettes de marques
        
        INSTRUCTIONS SP√âCIFIQUES :
        - Lis TOUS les textes visibles (enseignes, menus, √©tiquettes, noms de marques)
        - Identifie le lieu/produit/service EXACT si possible
        - Pour les restaurants : mentionne le nom exact, le type de cuisine
        - Pour les produits : mentionne la marque et le type de produit
        - Pour les lieux : donne le nom pr√©cis si visible
        - Pour les arnaques : d√©tecte les signes suspects (fautes, urgence, liens douteux)
        
        R√©ponds UNIQUEMENT avec un objet JSON valide :
        {
            "businessName": "NOM EXACT du lieu/produit/service d√©tect√©",
            "businessType": "Type pr√©cis (Restaurant Italien, Cin√©ma, Huile d'olive, etc.)",
            "address": "Adresse/localisation si visible, sinon 'Localisation d√©tect√©e'",
            "category": "Cat√©gorie d√©taill√©e bas√©e sur ce que tu vois",
            "icon": "Emoji le plus appropri√©",
            "suggestedRating": 4,
            "suggestedReview": "",
            "positiveSuggestions": ["suggestion positive 1", "suggestion positive 2"],
            "negativeSuggestions": ["suggestion n√©gative 1", "suggestion n√©gative 2"],
            "confidence": 0.95
        }
        
        EXEMPLES DE BONNES R√âPONSES :
        - Huile d'olive Terra Delyssa ‚Üí "Terra Delyssa", "Huile d'olive bio", "ü´í"
        - Restaurant avec enseigne ‚Üí "Le Petit Bistrot", "Restaurant fran√ßais", "üçΩÔ∏è"
        - Affiche de cin√©ma ‚Üí "Cin√©ma Grand Rex", "Salle de cin√©ma", "üé¨"
        - SMS suspect ‚Üí "Arnaque SMS d√©tect√©e", "Tentative de fraude", "‚ö†Ô∏è"
        
        R√àGLES IMPORTANTES :
        - Si tu vois du texte, utilise-le pour identifier pr√©cis√©ment
        - Les suggestions positives et n√©gatives doivent √™tre des mots-cl√©s courts et pertinents.
        - Le champ suggestedReview doit √™tre vide par d√©faut.
        - La note doit refl√©ter l'apparence/qualit√© visible (1-5).
        - Pour les arnaques : note=1, avis d'alerte.
        - Si l'image est positive (ex: plat √©toil√©), priorise les suggestions positives.
        - Si l'image est n√©gative (ex: colis endommag√©), priorise les suggestions n√©gatives.
        - Si l'image est neutre, propose un √©quilibre de suggestions positives et n√©gatives.
        """
        
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": prompt},
                        {
                            "type": "image_url",
                            "image_url": {
                                "url": f"data:image/jpeg;base64,{image_data}"
                            }
                        }
                    ]
                }
            ],
            max_tokens=600,
            temperature=0.2  # R√©duire la temp√©rature pour plus de pr√©cision
        )
        
        # Extraire la r√©ponse JSON
        response_text = response.choices[0].message.content.strip()
        
        # Nettoyer la r√©ponse pour extraire le JSON
        if response_text.startswith('```json'):
            response_text = response_text[7:-3]
        elif response_text.startswith('```'):
            response_text = response_text[3:-3]
        
        # Parser le JSON
        result = json.loads(response_text)
        
        # Validation et valeurs par d√©faut am√©lior√©es
        result.setdefault('businessName', 'Lieu d√©tect√©')
        result.setdefault('businessType', 'Exp√©rience')
        result.setdefault('address', 'Localisation d√©tect√©e')
        result.setdefault('category', 'Exp√©rience/Service')
        result.setdefault('icon', 'üìç')
        result.setdefault('suggestedRating', 4)
        result.setdefault('suggestedReview', '') # Champ vide par d√©faut
        result.setdefault('positiveSuggestions', [])
        result.setdefault('negativeSuggestions', [])
        result.setdefault('confidence', 0.8)
        
        return result
        
    except Exception as e:
        print(f"Erreur GPT-4 Vision: {e}")
        # Fallback am√©lior√© en cas d'erreur
        return {
            "businessName": "Lieu d√©tect√©",
            "businessType": "Exp√©rience",
            "address": "Localisation analys√©e par IA",
            "category": "Exp√©rience/Service",
            "icon": "üìç",
            "suggestedRating": 4,
            "suggestedReview": "",
            "positiveSuggestions": [],
            "negativeSuggestions": [],
            "confidence": 0.5,
            "error": str(e)
        }

@image_analysis_bp.route('/analyze-image', methods=['POST'])
@cross_origin()
def analyze_image():
    """
    Endpoint pour analyser une image avec GPT-4 Vision
    """
    try:
        data = request.get_json()
        
        if not data or 'image' not in data:
            return jsonify({'error': 'Image data required'}), 400
        
        # Extraire les donn√©es de l'image (base64)
        image_data = data['image']
        
        # Supprimer le pr√©fixe data:image/...;base64, si pr√©sent
        if ',' in image_data:
            image_data = image_data.split(',')[1]
        
        # Analyser l'image avec GPT-4 Vision
        result = analyze_image_with_gpt4_vision(image_data)
        
        return jsonify({
            'success': True,
            'analysis': result
        })
        
    except Exception as e:
        print(f"Erreur dans analyze_image: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@image_analysis_bp.route('/health', methods=['GET'])
@cross_origin()
def health_check():
    """
    Endpoint de v√©rification de sant√©
    """
    return jsonify({
        'status': 'healthy',
        'service': 'R8it Image Analysis API',
        'version': '1.0.0'
    })



